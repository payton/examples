# Sources
# - https://gist.github.com/jed/56b1f58297d374572bc51c59394c7e7f
#
AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  Nonce:
    Type: String
    Default: '1'

Outputs:
  BucketAWSLink:
    Value:
      Fn::Join:
        - ""
        - - "https://s3.console.aws.amazon.com/s3/buckets/"
          - !Ref Bucket
          - "?region="
          - !Ref "AWS::Region"
  LambdaAWSLink:
    Value:
      Fn::Join:
        - ""
        - - "https://"
          - !Ref "AWS::Region"
          - ".console.aws.com/lambda/home?region="
          - !Ref "AWS::Region"
          - "#/functions/"
          - !Ref IndexLambda
          - "?tab=code"
  DistributionAWSLink:
    Value:
      Fn::Join:
        - ""
        - - "https://"
          - !Ref "AWS::Region"
          - ".console.aws.com/lambda/home?region="
          - !Ref "AWS::Region"
          - "#/distributions/"
          - !Ref Distribution
  RedirectURI:
    Value:
      Fn::Join:
        - ""
        - - "https://"
          - !GetAtt Distribution.DomainName
          - "/_callback"

Resources:
  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "Web3 File Sharing OAI"

  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Origins:
          - Id: "S3Origin"
            DomainName: !GetAtt Bucket.DomainName
            OriginPath: '/cdn'
            S3OriginConfig:
              OriginAccessIdentity: !Join ["", ["origin-access-identity/cloudfront/", !Ref OriginAccessIdentity]]
        DefaultCacheBehavior:
          AllowedMethods:
            - "GET"
            - "HEAD"
            - "OPTIONS"
          DefaultTTL: 3600
          TargetOriginId: "S3Origin"
          ForwardedValues:
            QueryString: true
          ViewerProtocolPolicy: redirect-to-https
          LambdaFunctionAssociations:
          - EventType: viewer-request
            LambdaFunctionARN: !GetAtt IndexLambdaVersion.FunctionArn

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action: "s3:GetObject"
          Effect: Allow
          Resource:
            - Fn::Join:
              - ""
              - - "arn:aws:s3:::"
                - !Ref Bucket
                - "/cdn/*"
          Principal:
            CanonicalUser: !GetAtt OriginAccessIdentity.S3CanonicalUserId

  IndexLambda:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt IndexLambdaRole.Arn
      Runtime: nodejs16.x
      Handler: index.handler
      Code:
        S3Bucket: !Ref Bucket
        S3Key: 'web3-file-sharing-example.zip'

  IndexLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
            - edgelambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  IndexLambdaVersion:
    Type: Custom::LatestLambdaVersion
    Properties:
      ServiceToken: !GetAtt PublishLambdaVersion.Arn
      FunctionName: !Ref IndexLambda
      Nonce: !Ref Nonce

  # Custom resource for getting latest version of a lambda,
  # as required by CloudFront.

  PublishLambdaVersion:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs16.x
      Role: !GetAtt PublishLambdaVersionRole.Arn
      Code:
        ZipFile: |
          const {Lambda} = require('aws-sdk')
          const {send, SUCCESS, FAILED} = require('cfn-response')
          const lambda = new Lambda()

          exports.handler = (event, context) => {
            const {RequestType, ResourceProperties: {FunctionName}} = event

            if (RequestType == 'Delete') return send(event, context, SUCCESS)

            lambda.publishVersion({FunctionName}, (err, {FunctionArn}) => {
              err
                ? send(event, context, FAILED, err)
                : send(event, context, SUCCESS, {FunctionArn})
            })
          }

  PublishLambdaVersionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: PublishVersion
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: lambda:PublishVersion
            Resource: '*'
